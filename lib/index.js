// Generated by CoffeeScript 1.10.0
(function() {
  var _, async, es, seneca;

  es = require('elasticsearch');

  async = require('async');

  _ = require('underscore');

  seneca = require('seneca')();

  module.exports = function(options) {
    var _addOrUpdate, _extractCourseData, _extractLessonData, _extractSlideData, _extractSlideText, _remove, _removeAllSlidesForLesson, esClient, indexName, pluginName;
    pluginName = 'search';
    indexName = options.index;
    esClient = null;
    _removeAllSlidesForLesson = function(lessonId, done) {
      return done();
    };
    _remove = function(arg, done) {
      var id, type;
      type = arg.type, id = arg.id;
      return esClient["delete"]({
        index: indexName,
        type: type,
        id: id
      }, function(err, resp) {
        return done(err, {});
      });
    };
    _addOrUpdate = function(arg, done) {
      var doc, id, type;
      type = arg.type, id = arg.id, doc = arg.doc;
      return esClient.update({
        index: indexName,
        type: type,
        id: id,
        body: {
          doc: doc,
          upsert: doc
        }
      }, function(err, resp) {
        return done(err, {});
      });
    };
    _extractCourseData = function(course) {
      var ref;
      return {
        title: course.title,
        description: course.description,
        app: (ref = course.audience) != null ? ref.application : void 0
      };
    };
    _extractLessonData = function(lesson) {
      var ref;
      return {
        title: lesson.title,
        description: lesson.description,
        app: (ref = lesson.audience) != null ? ref.application : void 0
      };
    };
    _extractSlideText = function(slide) {
      var mediaRegex, separator;
      separator = "\n";
      mediaRegex = /\.(png|jpg|jpgeg|avi|mp3|mp4)$/i;
      if (_.isArray(slide)) {
        return slide.map(_extractSlideText).join(separator);
      } else if (_.isObject(slide)) {
        return _.values(slide).map(_extractSlideText).join(separator);
      } else if (_.isString(slide) && !(slide.match(mediaRegex))) {
        return slide;
      } else {
        return "";
      }
    };
    _extractSlideData = function(slide) {
      var ref;
      return {
        name: slide.name,
        data: slide.data,
        app: (ref = slide.lesson.audience) != null ? ref.application : void 0,
        lesson: slide.lesson._id.toString(),
        text: _extractSlideText(slide.data)
      };
    };
    this.add({
      init: pluginName
    }, function(args, done) {
      console.log("Connecting to Elastic Search", options.host);
      esClient = new es.Client({
        host: options.host
      });
      return esClient.ping({
        requestTimeout: Infinity
      }, function(err) {
        return done(err);
      });
    });
    this.add({
      cmd: 'update',
      type: 'course'
    }, function(args, done) {
      var doc, id;
      id = args.doc._id.toString();
      doc = _extractCourseData(args.doc);
      return _addOrUpdate({
        type: 'course',
        id: id,
        doc: doc
      }, done);
    });
    this.add({
      cmd: 'update',
      type: 'lesson'
    }, (function(_this) {
      return function(args, done) {
        var doc, id, ref, tasks;
        id = args.doc._id.toString();
        doc = _extractLessonData(args.doc);
        tasks = [];
        tasks.push(function(n) {
          return _addOrUpdate({
            type: 'lesson',
            id: id,
            doc: doc
          }, n);
        });
        tasks.push(function(n) {
          return _removeAllSlidesForLesson(id, n);
        });
        tasks = tasks.concat((((ref = args.doc.configuration) != null ? ref.slides : void 0) || []).slice(0, 1).map(function(slide) {
          return function(n) {
            var ndoc;
            ndoc = _.extend(slide, {
              _id: id + "-" + slide.name,
              lesson: args.doc.toJSON()
            });
            return _this.act({
              cmd: 'update',
              type: 'slide',
              doc: ndoc
            }, n);
          };
        }));
        return async.series(tasks, done);
      };
    })(this));
    this.add({
      cmd: 'update',
      type: 'slide'
    }, function(args, done) {
      var id, ndoc;
      id = args.doc._id.toString();
      ndoc = _extractSlideData(args.doc);
      return _addOrUpdate({
        type: 'slide',
        id: id,
        doc: ndoc
      }, done);
    });
    this.add({
      cmd: 'delete'
    }, function(args, done) {
      return _remove({
        type: args.type,
        id: args.id
      }, done);
    });
    this.add({
      cmd: 'search'
    }, function(args, done) {
      var q;
      q = args.query;
      return esClient.search({
        index: indexName,
        body: {
          query: {
            match: {
              title: q
            }
          }
        }
      }, function(err, res) {
        var results;
        if (err != null) {
          return done(err);
        }
        results = res.hits.hits || [];
        return done(null, results);
      });
    });
    return {
      name: pluginName
    };
  };

}).call(this);
