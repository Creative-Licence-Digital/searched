// Generated by CoffeeScript 1.10.0
(function() {
  var _, async, es, format, queries, seneca;

  es = require('elasticsearch');

  async = require('async');

  _ = require('underscore');

  seneca = require('seneca')();

  queries = require('./queries');

  format = require('./format');

  module.exports = function(options) {
    var esClient, esc, indexName, pluginName;
    pluginName = 'search';
    indexName = options.index;
    esClient = null;
    esc = null;
    this.add({
      init: pluginName
    }, function(args, done) {
      console.log("Connecting to Elastic Search", options.host);
      esClient = new es.Client({
        host: options.host
      });
      esc = require('./elasticsearch')(esClient, indexName);
      return esClient.ping({
        requestTimeout: Infinity
      }, function(err) {
        return done(err);
      });
    });
    this.add({
      cmd: 'update',
      type: 'course'
    }, function(args, done) {
      var doc, id;
      id = args.doc._id.toString();
      doc = format.course(args.doc);
      return esc.addOrUpdate({
        type: 'course',
        id: id,
        doc: doc
      }, done);
    });
    this.add({
      cmd: 'update',
      type: 'lesson'
    }, (function(_this) {
      return function(args, done) {
        var doc, id, ref, tasks;
        id = args.doc._id.toString();
        doc = format.lesson(args.doc);
        tasks = [];
        tasks.push(function(n) {
          return esc.addOrUpdate({
            type: 'lesson',
            id: id,
            doc: doc
          }, n);
        });
        tasks.push(function(n) {
          return esc.removeAllSlidesForLesson(id, n);
        });
        tasks = tasks.concat((((ref = args.doc.configuration) != null ? ref.slides : void 0) || []).slice(0, 1).map(function(slide) {
          return function(n) {
            var ndoc;
            ndoc = _.extend(slide, {
              _id: id + "-" + slide.name,
              lesson: args.doc.toJSON()
            });
            return _this.act({
              cmd: 'update',
              type: 'slide',
              doc: ndoc
            }, n);
          };
        }));
        return async.series(tasks, done);
      };
    })(this));
    this.add({
      cmd: 'update',
      type: 'slide'
    }, function(args, done) {
      var id, ndoc;
      id = args.doc._id.toString();
      ndoc = format.slide(args.doc);
      return esc.addOrUpdate({
        type: 'slide',
        id: id,
        doc: ndoc
      }, done);
    });
    this.add({
      cmd: 'delete'
    }, function(args, done) {
      return esc.remove({
        type: args.type,
        id: args.id
      }, done);
    });
    this.add({
      cmd: 'search'
    }, function(args, done) {
      return esc.search({
        type: args.type,
        query: args.query
      }, done);
    });
    return {
      name: pluginName
    };
  };

}).call(this);
