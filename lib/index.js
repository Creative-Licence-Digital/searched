// Generated by CoffeeScript 1.10.0
(function() {
  var _, async, es, format, queries, seneca;

  es = require('elasticsearch');

  async = require('async');

  _ = require('underscore');

  seneca = require('seneca')();

  queries = require('./queries');

  format = require('./format');

  module.exports = function(options) {
    var esClient, esc, indexName, pluginName;
    pluginName = 'search';
    indexName = options.index;
    esClient = null;
    esc = null;
    this.add({
      init: pluginName
    }, function(args, done) {
      console.log("Connecting to Elastic Search", options.host);
      esClient = new es.Client({
        host: options.host
      });
      esc = require('./elasticsearch')(esClient, indexName);
      return esClient.ping({
        requestTimeout: Infinity
      }, function(err) {
        return done(err);
      });
    });
    this.add({
      cmd: 'index',
      type: 'course'
    }, function(args, done) {
      var courses, tasks;
      courses = args.docs;
      tasks = courses.map(function(course) {
        var doc, id, update;
        id = course._id.toString();
        doc = format.course(course);
        update = esc._addOrUpdate({
          type: "course",
          id: id,
          doc: doc
        });
        return [
          {
            update: {
              _id: update.id,
              _type: update.type,
              _index: update.index
            }
          }, update.body
        ];
      });
      tasks = _.flatten(tasks);
      return esClient.bulk({
        body: tasks
      }, function(err, resp) {
        if (err != null) {
          console.error(err);
        }
        return done(err, {});
      });
    });
    this.add({
      cmd: 'index',
      type: 'lesson'
    }, function(args, done) {
      var lessons, tasks;
      lessons = args.docs;
      tasks = lessons.map(function(lesson) {
        var doc, id, slides, update;
        id = lesson._id.toString();
        doc = format.lesson(lesson);
        slides = lesson.configuration.slides || [];
        update = esc._addOrUpdate({
          type: "lesson",
          id: id,
          doc: doc
        });
        tasks = [
          {
            update: {
              _id: update.id,
              _type: update.type,
              _index: update.index
            }
          }, update.body
        ];
        return tasks = tasks.concat(slides.map(function(s) {
          var d, sid, upd;
          sid = id + "-" + s.name;
          s = _.extend(s, {
            _id: sid,
            lesson: lesson
          });
          d = format.slide(s);
          upd = esc._addOrUpdate({
            type: "slide",
            id: sid,
            doc: d
          });
          return [
            {
              update: {
                _id: update.id,
                _type: update.type,
                _index: update.index
              }
            }, upd.body
          ];
        }));
      });
      tasks = _.flatten(tasks);
      return esClient.bulk({
        body: tasks
      }, function(err, resp) {
        if (err != null) {
          console.error(err);
        }
        return done(err, {});
      });
    });
    this.add({
      cmd: 'delete'
    }, function(args, done) {
      return esc.remove({
        type: args.type,
        id: args.id
      }, done);
    });
    this.add({
      cmd: 'search'
    }, function(args, done) {
      return esc.search({
        type: args.type,
        query: args.query
      }, done);
    });
    return {
      name: pluginName
    };
  };

}).call(this);
